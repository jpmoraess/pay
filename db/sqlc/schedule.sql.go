// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: schedule.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (user_id, weekday, start_time, end_time, interval_minutes)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, weekday, start_time, end_time, interval_minutes
`

type CreateScheduleParams struct {
	UserID          uuid.UUID   `json:"user_id"`
	Weekday         int32       `json:"weekday"`
	StartTime       pgtype.Time `json:"start_time"`
	EndTime         pgtype.Time `json:"end_time"`
	IntervalMinutes int32       `json:"interval_minutes"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRow(ctx, createSchedule,
		arg.UserID,
		arg.Weekday,
		arg.StartTime,
		arg.EndTime,
		arg.IntervalMinutes,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Weekday,
		&i.StartTime,
		&i.EndTime,
		&i.IntervalMinutes,
	)
	return i, err
}

const getSchedule = `-- name: GetSchedule :one
SELECT id, user_id, weekday, start_time, end_time, interval_minutes FROM schedules
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSchedule(ctx context.Context, id uuid.UUID) (Schedule, error) {
	row := q.db.QueryRow(ctx, getSchedule, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Weekday,
		&i.StartTime,
		&i.EndTime,
		&i.IntervalMinutes,
	)
	return i, err
}
