// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: payment.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (id, external_id, value, due_date)
VALUES ($1, $2, $3, $4)
RETURNING id, external_id, value, due_date, status, created_at, updated_at
`

type CreatePaymentParams struct {
	ID         uuid.UUID      `json:"id"`
	ExternalID string         `json:"external_id"`
	Value      pgtype.Numeric `json:"value"`
	DueDate    time.Time      `json:"due_date"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.ID,
		arg.ExternalID,
		arg.Value,
		arg.DueDate,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Value,
		&i.DueDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPayment = `-- name: GetPayment :one
SELECT id, external_id, value, due_date, status, created_at, updated_at FROM payments
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPayment(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.db.QueryRow(ctx, getPayment, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Value,
		&i.DueDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentByExternal = `-- name: GetPaymentByExternal :one
SELECT id, external_id, value, due_date, status, created_at, updated_at FROM payments
WHERE external_id = $1
LIMIT 1
`

func (q *Queries) GetPaymentByExternal(ctx context.Context, externalID string) (Payment, error) {
	row := q.db.QueryRow(ctx, getPaymentByExternal, externalID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.Value,
		&i.DueDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
